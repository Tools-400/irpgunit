<!--
 * =====================================================================
 *   This Ant script helps you to create an upload the project's 
 *   update site. Before you can run the script, you need to copy
 *   'template_ftp.properties' to 'ftp.properties' and change the
 *   properties to meet your needs.
 *
 *   In order to use all features of the script, you need to
 *   have the 'iSphere Ant Plugin' installed and the 'iSphere Help Builder'
 *   project in your workspace.
 *
 *   The main switches to control the build process are:
 *
 *     build.version       - project version number
 *     build.help.enabled  - specifies whether to build the help pages
 *     build.dryrun        - specifies whether to apply changes to GitHub
 *
 *   See also: build.properties
 *
 *   Setup the el tools configuration:
 *
 *     1 JRE
 *     1.1 Select option "Run in the same JRE as the workspace".
 *
 *     2 Classpath
 *     2.1 Add the following jars from [iRPGUnit Build]/build/lib:
 *         - org.hamcrest.core_1.1.0.v20090501071000.jar
 *         - junit.jar
 *         - jsch-0.1.55.jar
 *         - commons-net-3.3-patched.jar
 *         - ant-contrib-1.0b3.jar
 *
 *   Here are the steps to create a new version of the plug-in:
 *
 *     1 Preparation
 *     1.1 On the PC run the 'CheckNLSMessages' JUnit test to check
 *         for missing or obsolete message property entries.
 *     1.2 On the PC search java sources for missing copyright header.
 *         Menu: Search -> File -> (?s)\A((?!copyright).)*\Z
 *               Check: Regular expression
 *     1.3 On the PC change version number in COPYRIGHT.RPGLE.
 *     1.4 On the PC push changes of project's i Project to the AS/400.
 *     1.5 On the PC update document 'iRPGUnit.doc' and also save it as 
 *         'iRPGUnit for RDi 9.5.1.3+.pdf'.
 *     1.6 Refresh project 'iRPGUnit Core Plugin'.
 *     1.7 On the PC increment version number of property 'build.version'
 *         in file 'build.properties'.
 *
 *     2 Creating the library
 *     2.1 On the IBM i run the following commands:
 *
 *           ADDLIBLE LIB(RPGUNITDVP)
 *
 *           CRTBNDCL PGM(RPGUNITDVP/A_CRTPKG) 
 *             SRCFILE(RPGUNITDVP/QBUILD) 
 *             DFTACTGRP(*NO) ACTGRP(*NEW) DBGVIEW(*LIST)
 *
 *           CALL PGM(A_CRTPKG) PARM('RPGUNITDVP')
 *
 *     2.2 Run target 'downloadIBMiLibrary' of build.xml.
 *
 *     3 Creating the update site
 *     3.1 On the PC run target 'build' of file 'build.xml'.
 *     3.2 Right-click 'site.xml', select 'PDE Tools -> Build Site'.
 *     3.3 On the PC run target 'createGitHubFiles' of file 'build.xml'.
 *     3.4 On the PC run target 'uploadGitHubFiles' of file 'build.xml'.
 *     3.5 Check-in source code.
 *     3.6 Create version tag, e.g.: v002.004.001.r
 *
 * ===================================================================== -->
<project name="iRPGUnit Build" default="build" basedir=".">

	<!-- Include Ant Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<property name="plugin.name" value="${build.public.project.name}" />
	<property name="workspace.home" location="./../../../.." />

	<!-- Load project names and new version number -->
	<property file="build.properties" />

	<!-- Load ftp user name and password -->
	<property file="ftp.properties" />

	<!-- Load IBM i FTP user name and password -->
	<if>
		<available file="ftp-credentials.properties"/>
		<then>
			<property file="ftp-credentials.properties" />
		</then>
		<else>
			<echo>File 'ftp-credentials.properties' not found.</echo>
			<echo>Copy 'ftp-credentials_template.properties' to 'ftp-credentials.properties' and set the user names only (recommended).</echo>
			<fail message="Ant script stopped."/>
		</else>
	</if>

	<!-- Set date and time -->
	<tstamp>
		<format property="today.timestamp" pattern="dd.MM.yyyy - kk:mm:ss" locale="de,DE" />
		<format property="today.date.eur" pattern="dd.MM.yyyy" locale="de,DE" />
		<format property="today.date.iso" pattern="yyyy-MM-dd" locale="de,DE" />
		<format property="today.year" pattern="yyyy" locale="de,DE" />
	</tstamp>

	<!-- Set local FTP properties -->
	<property name="local.download.directory" location="${basedir}/temp-downloads" />
	<property name="local.savefile.name" value="${IBMi.ftp.savefile.name}" />
	<property name="local.savefile.directory" location="${workspace.home}/${build.project.core}/Server" />

	<!-- Set update site properties -->
	<property name="site.dir" location="${workspace.home}/${build.updatesite}" />
	<property name="site.features.dir" location="${site.dir}/features" />
	<property name="site.plugins.dir" location="${site.dir}/plugins" />

	<!-- Set temp directories -->
	<property name="temp.dir" location="${basedir}/temp" />
	<property name="temp.dir.local_updatesite" location="${temp.dir}/local_updatesite" />

	<!-- Target IDE -->
	<if>
		<equals arg1="${build.target}" arg2="RDi" />
		<then>
			<property name="do.copy.site.xml" value="false" />
		</then>
		<else>
			<property name="do.copy.site.xml" value="true" />
		</else>
	</if>

	<!-- Set regular expressions and replacement values -->
	<property name="version.number.validation.regex" value="[1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:(b)[0-9]{3}|(r)[0-9]{0,1}))?" />
	
	<property name="version.number.search.regex" value="[1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r[0-9]{0,1}))?" />
	
	<property name="validate.version.regex" value="^(${version.number.validation.regex})$" />
	<property name="release.flag.regex" value="^(?:${version.number.validation.regex})$" />

	<property name="manifest.version.regex" value="(Bundle-Version:\s)(${version.number.search.regex})" />
	<property name="manifest.version.replace" value="\1${build.version}" />

	<property name="feature.1.version.regex" value="(&lt;feature.*version=&quot;)(${version.number.search.regex})(&quot;\s+provider-name.*?&gt;)" />
	<property name="feature.1.version.replace" value="\1${build.version}\3" />

	<property name="feature.2.version.regex" value="(&lt;import feature.*version=&quot;)(${version.number.search.regex})(&quot;\s*)(match.*)?(/&gt;)" />
	<property name="feature.2.version.replace" value="\1${build.version}\3\4\5" />
	
	<property name="feature.copyright.1.date.regex" value="^([ ]*Copyright.*[0-9]{4})-([0-9]{4})(.*)$" />
	<property name="feature.copyright.1.date.replace" value="\1-${today.year}\3" />

	<property name="site.1.version.regex" value="(&lt;feature.*_)(${version.number.search.regex})(\.jar)" />
	<property name="site.1.version.replace" value="\1${build.version}\3" />

	<property name="site.2.version.regex" value="(&lt;feature.*version=&quot;)(${version.number.search.regex})(&quot;)" />
	<property name="site.2.version.replace" value="\1${build.version}\3" />

	<property name="html.copyright.1.version.regex" value="^(Version: )(${version.number.search.regex})(.*)?" />
	<property name="html.copyright.1.version.replace" value="\1${build.version}\3" />
	
	<property name="html.copyright.2.version.regex" value="(Copyright:\s)([0-9]{4})" />
	<property name="html.copyright.2.version.replace" value="\1${today.year}" />

	<!-- Check for BETA or RELEASE version -->
	<propertyregex property="release.flag" input="${build.version}" regexp="${release.flag.regex}" select="\1" casesensitive="true" />
	<if>
		<equals arg1="${release.flag}" arg2="b" />
		<then>
			<echo>Building a BETA version.</echo>
			<property name="is.beta.version" value="true" />
			<property name="beta.dir" value="${sf.ftp.beta.dir.name}" />
			<property name="version.info" value="&lt;div class=&quot;beta&quot;&gt;Beta Version - ${build.version}&lt;/div&gt;" />
			<property name="ignore.build.home" value="true" />
		</then>
		<else>
			<echo>Building a RELEASE version.</echo>
			<property name="is.beta.version" value="false" />
			<property name="beta.dir" value="." />
			<property name="version.info" value="&lt;div class=&quot;release&quot;&gt;Release Version - ${build.version}&lt;/div&gt;" />
		</else>
	</if>

	<!-- Set build target dependant parameters -->
	<property name="target.ide.product.name.short.rdi" value="RDi 9.5.1.3+" />
	<property name="target.ide.product.name.short.wdsci" value="WDSCi 7.0" />
	<property name="target.ide.product.name.long.rdi" value="IBM Rational Developer for i" />
	<property name="target.ide.product.name.long.wdsci" value="Websphere Development Studio Client for iSeries" />
	<property name="target.ide.rdi" value="rdi8.0" />
	<property name="target.ide.wdsci" value="wdsci7.0" />
	
	<if>
		<equals arg1="${build.target}" arg2="RDi" />
		<then>
			<property name="target.ide.ide.product.name.long" value="${target.ide.product.name.long.rdi}" />
			<property name="target.ide.ide.product.name.short" value="${target.ide.product.name.short.rdi}" />
			<property name="target.ide.sf.dir" value="${target.ide.rdi}" />
			<property name="target.ide.exclude.web.files" value="**/wdsci*.*,**/*.snippet" />
			<property name="target.ide.exclude.download.files" value="*wdsci*" />
		</then>
		<else>
			<property name="target.ide.ide.product.name.long" value="${target.ide.product.name.long.wdsci}" />
			<property name="target.ide.ide.product.name.short" value="${target.ide.product.name.short.wdsci}" />
			<property name="target.ide.sf.dir" value="${target.ide.wdsci}" />
			<property name="target.ide.exclude.web.files" value="**/rdi*.*,**/*.snippet" />
			<property name="target.ide.exclude.download.files" value="*rdi*"/>
		</else>
	</if>

	<property name="target.ide.ide.product.full.name" value="${target.ide.product.name.long.rdi} - ${target.ide.ide.product.name.short}" />
	<property name="target.ide.zip.file.name" value="${build.public.project.name} for ${target.ide.ide.product.name.short} (v${build.version} Update Site).zip" />
	<property name="target.ide.uload.dir" value="${sf.ftp.project}/docs" />

	<if>
		<equals arg1="${is.beta.version}" arg2="true" />
		<then>
			<property name="target.ide.root.update.site.url" value="${sf.update.site.url}/${beta.dir}/eclipse/${target.ide.sf.dir}" />
			<property name="target.ide.root.help.site.url" value="${sf.help.url}/${sf.dir.updatesite.help.dir}/" />
			<property name="target.ide.root.beta.help.site.url" value="${sf.help.url}/${sf.ftp.beta.dir.name}/${sf.dir.updatesite.help.dir}/" />
			<property name="marketplace.installation.hint.snippet" value="beta_marketplace.snippet" />
		</then>
		<else>
			<property name="target.ide.root.update.site.url" value="${sf.update.site.url}/eclipse/${target.ide.sf.dir}" />
			<property name="target.ide.root.help.site.url" value="${sf.help.url}/${sf.dir.updatesite.help.dir}/" />
			<property name="target.ide.root.beta.help.site.url" value="${sf.help.url}/${sf.ftp.beta.dir.name}/${sf.dir.updatesite.help.dir}/" />
			<property name="marketplace.installation.hint.snippet" value="release_marketplace.snippet" />
		</else>
	</if>

	<property name="site.xml.property.url.regex" value="(&lt;site)([ ]*url=&quot;\S*&quot;[ ]*)?(&gt;)" />
	<property name="site.xml.property.url.replace" value="\1 url=&quot;${target.ide.root.update.site.url}&quot;\3" />

	<!-- Set common upload properties -->
	<property name="build.dir" location="./.." />
	<property name="build.upload.dir" location="${build.dir}/upload" />

	<!-- Set HTML update site properties -->
	<property name="build.template.dir"                  location="${build.dir}/build/templates" />
	<property name="build.template.dir.web"              location="${build.template.dir}/template_updatesite_web" />
	<property name="build.template.dir.web.build_target" location="${build.template.dir.web}/eclipse/build_target" />
	<property name="build.template.dir.web.assets"       location="${build.template.dir.web}/eclipse/build_target/assets" />
	<property name="build.upload.dir"                    location="${build.dir}/upload" />
	<property name="build.upload.dir.files"              location="${build.upload.dir}/sf-files/${beta.dir}" />
	<property name="build.upload.dir.updateSite"         location="${build.upload.dir}/sf-updatesite/${beta.dir}" />
	<property name="build.upload.dir.updateSite.eclipse" location="${build.upload.dir}/sf-updatesite/${beta.dir}/eclipse/${target.ide.sf.dir}" />
	
	<!-- was: sf-web -->
	<property name="build.upload.dir.web"                location="${build.upload.dir}/sf-updatesite/${beta.dir}" />
	<property name="build.upload.dir.web.build.target"   location="${build.upload.dir}/sf-updatesite/${beta.dir}/eclipse/build_target" />
	<property name="build.upload.dir.web.eclipse"        location="${build.upload.dir}/sf-updatesite/${beta.dir}/eclipse/${target.ide.sf.dir}" />
	<property name="build.upload.dir.web.eclipse.assets" location="${build.upload.dir}/sf-updatesite/${beta.dir}/eclipse/${target.ide.sf.dir}/assets" />
	
	<property name="build.upload.dir.help"               location="${build.upload.dir}/sf-help/${beta.dir}/help" />
	<property name="build.upload.dir.home"               location="${build.upload.dir}/sf-home/" />
	<property name="zip.base.directory"                  location="${workspace.home}/${build.updatesite}" />
	<property name="project.doc"                         location="${workspace.home}/${build.project.core}/${build.folder.doc}/${build.project.doc}" />
	<property name="project.pdf"                         location="${workspace.home}/${build.project.core}/${build.folder.doc}/${build.project.pdf}" />
	
	<!-- Set the name of the default home page file -->
	<property name="home.page" value="index.html" />
	<property name="support.page" value="support.html" />
	<property name="files.page" value="files/index.html" />

	<!-- Set update site values -->
	<property name="updatesite.tag.file" location="${workspace.home}\${build.updatesite}\iRPGUnit Update Site v${build.version}.tag" />
	
	<!-- Check what shall be build -->
	<if>
		<equals arg1="${build.help.enabled}" arg2="true" />
		<then>
			<!-- build help pages -->
			<echo>Building ${build.public.project.name} help web pages is enabled.</echo>
		</then>
		<else>
			<property name="ignore.build.help" value="true" />
			<echo>IGNORED: ${build.public.project.name} Help</echo>
		</else>
	</if>

	<!--
    * =====================================================================
    *   Downloads the library from the System i.
    *   This target requires a patched version of commons-net-3.3.jar
    *   where bug NET-512 has been fixed.
    *   (https://issues.apache.org/jira/browse/NET-512)
    *
    *   Steps for preparing the RPGUNIT save file:
    *    1) Add library RPGUNIT to your library list.
    *    2) Compile program #PACKAGE.
    *    3) Call program #PACKAGE: CALL PGM(#PACKAGE)
    *   The save file is created in library RPGUNIT.
    * ===================================================================== -->
	<target name="downloadIBMiLibrary" depends="ftpCredentialsIBMi" description="Download library from IBM i">

		<echo>Downloading save file ${IBMi.ftp.savefile.name} ...</echo>
		<echo>Server: ${IBMi.ftp.server}</echo>
		<echo>User:   ${IBMi.ftp.user}</echo>

		<mkdir dir="${local.download.directory}" />

		<ftp action="get" server="${IBMi.ftp.server}" userid="${IBMi.ftp.user}" password="${IBMi.ftp.password}" binary="true" verbose="true" remotedir="${IBMi.ftp.savefile.library}" systemTypeKey="OS/400">
			<fileset dir="${local.download.directory}" casesensitive="false">
				<include name="${IBMi.ftp.savefile.name}" />
			</fileset>
		</ftp>

		<move file="${local.download.directory}/${IBMi.ftp.savefile.name}" tofile="${local.savefile.directory}/${local.savefile.name}" overwrite="true" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />
		<eclipse.refreshLocal resource="${build.project.core}" depth="infinite" />

	</target>

	<!-- =============================================================
	      Erstellt eine neue Update-Site.
	      Alle alten Dateien werden überschrieben, bzw. gelöscht.
	     ============================================================= -->
	<target name="build" depends="checkBuildTarget, clean, updateVersionNumber, updateHelpProject, createTagFile" description="Step 1">

		<echo>+------------------------------------------------------+</echo>
		<echo>|  Finished RPGUnit build ${build.version}             |</echo>
		<echo>|                                                      |</echo>
		<echo>|  Right-click 'site.xml' and select 'PDE Tools' ->    |</echo>
		<echo>|  'Build Site' to build the update site.              |</echo>
		<echo>|                                                      |</echo>
		<echo>|  Then proceed with:   createGitHubFiles              |</echo>
		<echo>|                      -uploadGitHubFiles-             |</echo>
		<echo>+------------------------------------------------------+</echo>
		<echo>*** Finished ***</echo>

		<antcall target="refreshProjects" />

	</target>

	<!-- =============================================================
	      Führt JUnit Test aus.
	     ============================================================= -->
	<target name="junit" >

		<echo>Running JUnit tests of project ${build.junit.project} ...</echo>
		
		<junit haltonerror="true" haltonfailure="true" printsummary="true">
			<classpath>
				<!-- JUnit4 -->
				<path location="${build.dir}/build/lib/junit.jar" />
				<path location="${build.dir}/build/lib/org.hamcrest.core_1.3.0.v201303031735.jar" />
				<!-- OSGI for finding org.eclipse.osgi.util.NLS -->
				<!--
				Not necessary, because BUILD.xml must run in the same JRE as the workspace.
				<path location="${build.dir}/build/lib/org.eclipse.osgi_3.6.3.R36x_v20110629.jar" />
				-->
				<!-- Projects with Messages classes -->
				<dirset dir="${workspace.home}" >
					<include name="${build.junit.classpath}"/>
				</dirset>
			</classpath>
			<batchtest>
				<fileset dir="${workspace.home}/${build.junit.project}/bin" id="id">
    				<include name="**/*NLS*.class"/>
				</fileset>
			</batchtest>
		</junit>
		
		<echo>... finished JUnit tests.</echo>

	</target>

	<!-- =============================================================
	      Kopiert alle erforderlichen Assets-Dateien.
	     ============================================================= -->
	<target name="createGitHubFiles" depends="prepareUpdateSite, createZipFile, createUpdateSite, createGitHubWebUpdateSite, createGitHubWebHelpPage, createGitHubWebHomePage" description="Step 3">

		<antcall target="cleanTempAndPDE" />
		<antcall target="refreshProjects" />

	</target>

	<!-- =============================================================
	      Erzeugt die ZIP Datei.
	     ============================================================= -->
	<target name="createZipFile">

		<echo>Erzeuge zip Datei: ${target.ide.zip.file.name}</echo>

		<mkdir dir="${build.upload.dir.updateSite}" />
		<mkdir dir="${build.upload.dir.files}" />

		<zip destfile="${build.upload.dir.files}/${target.ide.zip.file.name}">
			<fileset dir="${temp.dir.local_updatesite}" />
		</zip>

	</target>

	<!-- =============================================================
	      Erzeugt die Update Site.
	     ============================================================= -->
	<target name="createUpdateSite">

		<echo>Erzeuge Update Site: ${build.version}</echo>

		<mkdir dir="${build.upload.dir.updateSite.eclipse}" />

		
		<copy todir="${build.upload.dir.updateSite.eclipse}">
			<fileset dir="${temp.dir.local_updatesite}" />
		</copy>

	</target>

	<!--
    * =====================================================================
    *   Create the web pages of the update site.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    *
    *   Set the build properties as shown below, if you want to update 
    *   index.html:
    * 
    *     build.files.enabled=false
    *     build.web.enabled=true
    *     build.help.enabled=false
    *
    *   You can also update the update site like this:
    *     createGitHubWebUpdateSite
    *     cleanGitHubWebUpdateSite
    *     uploadGitHubWebUpdateSite
    * ===================================================================== -->
	<target name="createGitHubWebUpdateSite">

		<echo>Creating Eclipse web folders ...</echo>

		<echo>Preparing directory structure ...</echo>
		<mkdir dir="${build.upload.dir.web}" />

		<echo>Copying templates directory ...</echo>
		<copy todir="${build.upload.dir.web}">
			<fileset dir="${build.template.dir.web}" excludes="${target.ide.exclude.web.files}" />
		</copy>

		<echo>Loading marketplace installation hint</echo>
		<loadfile property="marketplace.installation.hint" srcfile="${build.template.dir.web.build_target}/${marketplace.installation.hint.snippet}" />
		
		<echo>Copying A_README.TXT ...</echo>
		<copy todir="${build.upload.dir.web.eclipse.assets}">
			<fileset dir="${workspace.home}\${build.project.server}\QBUILD">
				<include name="A_README.TXT" />
			</fileset>
		</copy>
		
		<echo>Renaming ${target.ide.sf.dir} ...</echo>
		<!-- <move todir="${build.upload.dir.web.eclipse}\${target.ide.sf.dir}"> -->
		<move todir="${build.upload.dir.web.eclipse}">
			<fileset dir="${build.upload.dir.web.build.target}" />
		</move>

		<echo>Renaming A_README.TXT ...</echo>
		<move file="${build.upload.dir.web.eclipse.assets}\A_README.TXT" tofile="${build.upload.dir.web.eclipse.assets}\readme.txt" />

		<echo>Renaming index.html ...</echo>
		<move file="${build.upload.dir.web.eclipse}/${build.target}_index.html" tofile="${build.upload.dir.web.eclipse}/index.html" />

		<echo>Replacing '@' variables ...</echo>

		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@VERSION_INFO@" value="${version.info}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@IDE_PRODUCT_NAME_LONG@" value="${target.ide.ide.product.name.long}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@IDE_PRODUCT_NAME_SHORT@" value="${target.ide.ide.product.name.short}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@UPDATE_SITE_URL@" value="${target.ide.root.update.site.url}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@TODAY_YEAR@" value="${today.year}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@VERSION_NUMBER@" value="${build.version}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@PROJECT_HOME@" value="${sf.gitlab.project.url}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@PLUGIN_NAME@" value="${plugin.name}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@HELP_SITE_URL@" value="${target.ide.root.help.site.url}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@BETA_HELP_SITE_URL@" value="${target.ide.root.beta.help.site.url}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@MARKETPLACE_INSTALLATION@" value="${marketplace.installation.hint}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@REPOSITORY_NAME@" value="${sf.repository.name}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@HOME_PAGE@" value="${sf.homepage.url}" />
		<replace file="${build.upload.dir.web.eclipse}/index.html" token="@FILES_PAGE@" value="${sf.files.url}" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Creates the help pages.
    *   This target call the build script of the 'Help Builder'
    *   project to create the web folder.
    *   This target creates the html help pages that go to the project's 
    *   web folder.
    *   This target is not specific to RDi/WDSCi. It does not matter for 
    *   what target it is called.
    *
    *   Set the build properties as shown below, if you want to update 
    *   index.html:
    * 
    *     build.files.enabled=false
    *     build.web.enabled=false
    *     build.help.enabled=true
    *
    *   You can also update the help pages like this:
    *     createGitHubWebHelpPage
    *     cleanGitHubWebHelpPage
    *     uploadGitHubWebHelpPage
    * ===================================================================== -->
	<target name="createGitHubWebHelpPage" >

		<echo>Creating ${build.public.project.name} help ...</echo>

		<mkdir dir="${build.upload.dir}" />

		<copy todir="${workspace.home}/${build.help.builder}/build/" file="${basedir}/helpproject.properties" overwrite="true" />

		<ant inheritAll="false" inheritrefs="false" antfile="${workspace.home}/${build.help.builder}/build/build.xml" target="build" />

		<copy todir="${build.upload.dir.help}">
			<fileset dir="${workspace.home}/${build.help.builder}/upload" />
		</copy>
		
		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Creates the project's home page.
    * ===================================================================== -->
	<target name="createGitHubWebHomePage" unless="ignore.build.home">

		<echo>Creating ${build.public.project.name} home page ...</echo>

		<copy todir="${build.upload.dir.home}">
			<fileset dir="${workspace.home}/${build.homepage.project}/html" />
		</copy>
		
		<replace file="${build.upload.dir.home}/${home.page}" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@VERSION_NUMBER@" value="${build.version}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@PROJECT_HOME@" value="${sf.gitlab.project.url}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TARGET_IDE_RDI@" value="${target.ide.rdi}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TARGET_IDE_WDSCI@" value="${target.ide.wdsci}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TARGET_IDE_PRODUCT_NAME_LONG_RDI@" value="${target.ide.product.name.long.rdi}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TARGET_IDE_PRODUCT_NAME_LONG_WDSCI@" value="${target.ide.product.name.long.wdsci}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TARGET_IDE_PRODUCT_NAME_SHORT_RDI@" value="${target.ide.product.name.short.rdi}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TARGET_IDE_PRODUCT_NAME_SHORT_WDSCI@" value="${target.ide.product.name.short.wdsci}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@BETA_VERSION@" value="${sf.ftp.beta.dir.name}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TODAY_YEAR@" value="${today.year}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@UPDATE_SITE_URL@" value="${target.ide.root.update.site.url}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@HELP_SITE_URL@" value="${target.ide.root.help.site.url}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@BETA_HELP_SITE_URL@" value="${target.ide.root.beta.help.site.url}" />
		<replace file="${build.upload.dir.home}/${home.page}" token="@FILES_PAGE@" value="${sf.files.url}" />

		<replace file="${build.upload.dir.home}/${support.page}" token="@VERSION_NUMBER@" value="${build.version}" />
		<replace file="${build.upload.dir.home}/${support.page}" token="@TODAY_YEAR@" value="${today.year}" />
		<replace file="${build.upload.dir.home}/${support.page}" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${build.upload.dir.home}/${support.page}" token="@UPDATE_SITE_URL@" value="${target.ide.root.update.site.url}" />
		<replace file="${build.upload.dir.home}/${support.page}" token="@HELP_SITE_URL@" value="${target.ide.root.help.site.url}" />
		<replace file="${build.upload.dir.home}/${support.page}" token="@BETA_HELP_SITE_URL@" value="${target.ide.root.beta.help.site.url}" />

		<replace file="${build.upload.dir.home}/${files.page}" token="@ZIP_FILE@" value="${target.ide.zip.file.name}" />
		<replace file="${build.upload.dir.home}/${files.page}" token="@TARGET_IDE@" value="${target.ide.sf.dir}" />
		<replace file="${build.upload.dir.home}/${files.page}" token="@TARGET_IDE_FULL_NAME@" value="${target.ide.ide.product.full.name}" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

    <!--
    * =====================================================================
    *   Uploads the entire project files to GitHub.
    *   This target must be run, after the GitHub files have been built.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    * ===================================================================== -->
    <target name="cleaningDocsDirectory">

        <echo>Cleaning 'docs' directory ...</echo>

        <mkdir dir="${workspace.home}/${target.ide.uload.dir}"/>
        <mkdir dir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}"/>
        <mkdir dir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}/update-site/eclipse/${target.ide.sf.dir}"/>
        <mkdir dir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}/help"/>
        <mkdir dir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}/files"/>

        <if>
            <equals arg1="${is.beta.version}" arg2="true" />
            <then>
                <delete>
                    <!-- delete: [workspace]/irpgunit/docs/beta-version -->
                    <fileset dir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}" includes="**/*"/>
                </delete>
            </then>
            <else>
                <delete includeemptydirs="true" failonerror="no">
                    <!-- delete: [workspace]/irpgunit/docs/ (exclude: beta-version) -->
                    <fileset dir="${workspace.home}/${target.ide.uload.dir}" includes="**/*" excludes=".project,.settings/,${sf.ftp.beta.dir.name}/"/>
                </delete>
            </else>
        </if>

	</target>
	<!--
    * =====================================================================
    *   Uploads the entire project files to GitHub.
    *   This target must be run, after the GitHub files have been built.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    * ===================================================================== -->
	<target name="uploadGitHubFiles" depends="checkBuildTarget,cleaningDocsDirectory" description="Uploads the entire project to GitHub">

		<echo>CReating GitHub upload directory ...</echo>

		<!-- Homepage -->
		<copy todir="${workspace.home}/${target.ide.uload.dir}" failonerror="false">
			<fileset dir="${build.upload.dir.home}">
				<include name="**"/>
			</fileset>
		</copy>

		<!-- Homepage Help -->
		<copy todir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}/help" >  
			<fileset dir="${build.upload.dir.help}">
				<include name="**"/>
			</fileset>
		</copy>

		<!-- Update Site -->
		<copy todir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}/update-site/eclipse/${target.ide.sf.dir}" >
			<fileset dir="${build.upload.dir.web.eclipse}">
				<include name="**"/>
			</fileset>
		</copy>

		<!-- Zipped Update Site -->
		<copy todir="${workspace.home}/${target.ide.uload.dir}/${beta.dir}/files/${target.ide.sf.dir}" >
			<fileset dir="${build.upload.dir.files}">
				<include name="**"/>
			</fileset>
		</copy>

	</target>

	<!-- =============================================================
	      Bereitet das Erstellen der Update Site vor.
	     ============================================================= -->
	<target name="prepareUpdateSite">

		<mkdir dir="${temp.dir.local_updatesite}" />
		<mkdir dir="${temp.dir.local_updatesite}/features" />
		<mkdir dir="${temp.dir.local_updatesite}/plugins" />
		<mkdir dir="${temp.dir.local_updatesite}/Server" />

		<copy file="${build.template.dir.web.assets}/upload_savf.cmd" todir="${temp.dir.local_updatesite}/Server" />

		<copy todir="${temp.dir.local_updatesite}/features">
			<fileset dir="${site.dir}/features" />
		</copy>

		<copy todir="${temp.dir.local_updatesite}/plugins">
			<fileset dir="${site.dir}/plugins" />
		</copy>

		<copy todir="${temp.dir.local_updatesite}">
			<fileset dir="${site.dir}" includes="artifacts.jar" />
			<fileset dir="${site.dir}" includes="content.jar" />
			<fileset dir="${site.dir}" includes="*.tag" />
			<fileset dir="${site.dir}" includes="*.cmd" />
		</copy>
		
		<copy toDir="${temp.dir.local_updatesite}/Server" >
			<fileset dir="${local.savefile.directory}" includes="${local.savefile.name}" />
		</copy>

		<copy file="${project.pdf}" todir="${temp.dir.local_updatesite}" overwrite="true"/>

		<if>
			<equals arg1="${do.copy.site.xml}" arg2="true" />
			<then>
				<copy todir="${temp.dir.local_updatesite}">
					<fileset dir="${site.dir}" includes="site.xml" />
				</copy>
			</then>
		</if>
	</target>

	<!--
    * =====================================================================
    *   Creates the tag file to indicate the project's version 
    *   of the zip file.
    * ===================================================================== -->
	<target name="createTagFile">

		<echo>Creating version tag file ${k} ...</echo>

		<touch file="${updatesite.tag.file}" />

		<eclipse.refreshLocal resource="${build.updatesite}" depth="infinite" />

	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien.
	     ============================================================= -->
	<target name="clean" depends="cleanTempAndPDE, cleanLocalUpdateSite">

		<mkdir dir="${build.upload.dir}" />
		<mkdir dir="${local.download.directory}" />

		<!-- 'upload' folder -->
		<delete includeemptydirs="true">
			<fileset dir="${build.upload.dir}" includes="**/*" />
			<fileset dir="${local.download.directory}" includes="**/*" />
		</delete>

		<antcall target="refreshProjects" />

	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien, außer site.xml
	     ============================================================= -->
	<target name="cleanLocalUpdateSite">

		<delete includeemptydirs="true" failonerror="off">
			<fileset dir="${workspace.home}\${build.updatesite}\plugins" includes="**/*" />
			<fileset dir="${workspace.home}\${build.updatesite}\features" includes="**/*" />
			<fileset file="iRPGUnit Update Site*.tag" />
		</delete>
	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien: iRPGUnit Update Site
	     ============================================================= -->
	<target name="cleanTempAndPDE" >

		<mkdir dir="${temp.dir}" />

		<!-- 'temp' folder -->
		<delete includeemptydirs="true">
			<fileset dir="${temp.dir}" includes="**/*" />
		</delete>

		<!-- Files created by PDE Tools -->
		<condition property="site.features.dir.exists">
			<available file="{site.features.dir}" type="dir" />
		</condition>

		<if>
			<equals arg1="site.features.dir.exists" arg2="true" />
			<then>
				<delete failonerror="true">
					<fileset dir="${site.features.dir}" />
				</delete>
			</then>
		</if>

		<condition property="site.plugins.dir.exists">
			<available file="{site.plugins.dir}" type="dir" />
		</condition>

		<if>
			<equals arg1="site.plugins.dir.exists" arg2="true" />
			<then>
				<delete failonerror="true">
					<fileset dir="${site.plugins.dir}" />
				</delete>
			</then>
		</if>

		<delete failonerror="true">
			<fileset dir="${site.dir}" includes="artifacts.jar" />
			<fileset dir="${site.dir}" includes="content.jar" />
			<fileset dir="${site.dir}" includes="*.tag" />
			<fileset dir="${site.dir}" includes="*.cmd" />
			<fileset dir="${site.dir}" includes="*.pdf" />
		</delete>

		<!-- Files created by PDE Tools -->
		<delete failonerror="true">
			<fileset dir="${site.dir}" includes="*.tag" />
		</delete>

		<antcall target="refreshProjects" />

	</target>

	<!--
    * =====================================================================
    *   Updates the version numbers of the following files:
    *     - MANIFEST.MF
    *     - feature.xml
    *     - site.xml
    * ===================================================================== -->
	<target name="updateVersionNumber" depends="validateVersionNumber">

		<echo>Updating version number to: ${build.version} ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>

				<if>
					<available file="${workspace.home}\@{project}" type="dir" />
					<then>

						<echo message="${workspace.home}\@{project}" />

						<if>
							<available file="${workspace.home}\@{project}/META-INF" />
							<then>
								<replaceregexp match="${manifest.version.regex}" replace="${manifest.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/META-INF" includes="MANIFEST.MF" />
								</replaceregexp>
							</then>
						</if>
						
						<if>
							<available file="${workspace.home}\@{project}/html" />
							<then>
								<replaceregexp match="${html.copyright.1.version.regex}" replace="${html.copyright.1.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/html" includes="copyright.html" />
								</replaceregexp>
								<replaceregexp match="${html.copyright.2.version.regex}" replace="${html.copyright.2.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/html" includes="copyright.html" />
								</replaceregexp>
							</then>
						</if>

						<replaceregexp match="${feature.1.version.regex}" replace="${feature.1.version.replace}" flags="s" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
						</replaceregexp>

						<replaceregexp match="${feature.2.version.regex}" replace="${feature.2.version.replace}" flags="s" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
						</replaceregexp>

						<replaceregexp match="${site.1.version.regex}" replace="${site.1.version.replace}" flags="g" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
						</replaceregexp>

						<replaceregexp match="${site.2.version.regex}" replace="${site.2.version.replace}" flags="g" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
						</replaceregexp>

						<eclipse.refreshLocal resource="@{project}" depth="infinite" />
					</then>
				</if>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Updates the help project woth the following files:
    *     - upload_savf.cmd
    * ===================================================================== -->
	<target name="updateHelpProject" depends="validateVersionNumber">

		<echo>Updating version number to: ${build.version} ...</echo>

		<copy file="${build.template.dir.web.assets}/upload_savf.cmd" todir="${workspace.home}/${build.help.projects}/html/appendix/assets" />

		<antcall target="refreshProjects" />

	<echo>Done.</echo>

</target>

	<!--
    * =====================================================================
    *   Validates the version number to ensure, that it matches
    *   the required format.
    * ===================================================================== -->
	<target name="validateVersionNumber">

		<echo>Validating version number to: ${build.version} ...</echo>

		<propertyregex property="validated.version" input="${build.version}" regexp="${validate.version.regex}" select="\1" casesensitive="true" />

		<if>
			<equals arg1="${build.version}" arg2="${validated.version}" />
			<then>
				<echo>Version number validated: OK</echo>
			</then>
			<else>
				<echo>+------------------------------------------------------+</echo>
				<echo>| Version number does not match expected pattern!      |</echo>
				<echo>|                                                      |</echo>
				<echo>| Pattern:                                             |</echo>
				<echo>| major.minor.micro.qualifier                          |</echo>
				<echo>|                                                      |</echo>
				<echo>| major - major version number (requested)             |</echo>
				<echo>| minor - minor version number (recommended)           |</echo>
				<echo>| micro - micro version number (optional)              |</echo>
				<echo>|                                                      |</echo>
				<echo>| The possible qualifiers are:                         |</echo>
				<echo>| r     - release version                              |</echo>
				<echo>| bnnn  - beta version, where nnn between 001 and 999  |</echo>
				<echo>+------------------------------------------------------+</echo>
				<fail>*** ERROR: Invalid version number. ***</fail>
			</else>
		</if>

	</target>

	<!--
    * =====================================================================
    *   Checks whether of not the build has been started 
    *   for the right target.
    * ===================================================================== -->
	<target name="checkBuildTarget">

		<echo>Checking build target: ${build.target}</echo>

		<condition property="build.updatesite.exists">
			<available file="${workspace.home}\${build.updatesite}" type="dir" />
		</condition>

		<if>
			<equals arg1="${build.updatesite.exists}" arg2="true" />
			<then>
				<echo>*** Success ***</echo>
			</then>
			<else>
				<fail>*** Error: Update site ${build.updatesite} not found! ***</fail>
			</else>
		</if>

	</target>

	<!--
    * =====================================================================
    *   Asks for FTP credentials: username and password.
    *   Property 'IBMi.ftp.user' is loaded from 'ftp.properties'.
    * ===================================================================== -->
	<target name="ftpCredentialsIBMi" unless="IBMi.ftp.password">

		<echo>Login:  ${IBMi.ftp.user}</echo>

		<input message="Please enter FTP password:" addproperty="IBMi.ftp.password" defaultvalue="" />

	</target>

	<!--
    * =====================================================================
    *   Refreshs the projects listed in 'build.properties'.
    * ===================================================================== -->
	<target name="refreshProjects">

		<echo>Refereshing projects ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>
				<eclipse.refreshLocal resource="@{project}" depth="infinite" />
				<echo>* @{project}</echo>
			</sequential>
		</for>

		<echo>* ${ant.project.name}</echo>
		<eclipse.refreshLocal resource="${ant.project.name}" depth="infinite" />

		<echo>Done.</echo>

	</target>

</project>